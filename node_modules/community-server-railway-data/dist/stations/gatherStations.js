var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
export default function gatherStations(config) {
    return __awaiter(this, void 0, void 0, function* () {
        const res = yield fetch(new URL("/api/network", config.trackmap));
        const network = yield res.json();
        if (!res.ok)
            throw res;
        const resolved = new Map();
        for (const station of network.stations) {
            if (station.dimension !== "minecraft:overworld")
                continue;
            const group = config.stations.find((group) => group.includes.includes(station.name));
            if (group) {
                const rGroup = resolved.get(group.name) || Object.assign(Object.assign({}, group), { location: [] });
                rGroup.location.push([station.location.x, station.location.z]);
                resolved.set(group.name, rGroup);
            }
            else if (!config.filterUngrouped) {
                resolved.set(`Ungrouped__${station.name}`, {
                    name: station.name,
                    includes: [station.name],
                    location: [[station.location.x, station.location.z]],
                });
            }
        }
        return [...resolved.values()];
    });
}
